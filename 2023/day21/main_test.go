package main

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGardenSteps(t *testing.T) {
	tests := []struct {
		name   string
		input  string
		steps  int
		expect int64
	}{
		{
			name: "Ex1",
			input: `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`,
			steps:  1,
			expect: 2,
		},
		{
			name: "Ex2",
			input: `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`,
			steps:  2,
			expect: 4,
		},
		{
			name: "Ex3",
			input: `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`,
			steps:  3,
			expect: 6,
		},
		{
			name: "Ex4",
			input: `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`,
			steps:  6,
			expect: 16,
		},
		{
			name: "Ex5",
			input: `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`,
			steps:  10,
			expect: 50,
		},
		{
			name: "Ex6",
			input: `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`,
			steps:  50,
			expect: 1594,
		},
		{
			name: "Ex7",
			input: `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`,
			steps:  100,
			expect: 6536,
		},
		{
			name: "Ex8",
			input: `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`,
			steps:  500,
			expect: 167004,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g, start := parseGarden([]byte(tt.input))
			assert.Equal(t, tt.expect, g.Steps(start, tt.steps)[tt.steps])
		})
	}
}

func TestInfiniteGarden_Get(t *testing.T) {
	tests := []struct {
		name   string
		input  string
		x      xy
		expect byte
	}{
		{
			name: "Ex1",
			input: `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`,
			x:      xy{0, 0},
			expect: '.',
		},
		{
			name: "Ex2",
			input: `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`,
			x:      xy{0, 10},
			expect: '.',
		},
		{
			name: "Ex3",
			input: `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`,
			x:      xy{1, 13},
			expect: '#',
		},
		{
			name: "Ex4",
			input: `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`,
			x:      xy{-1, -1},
			expect: '.',
		},
		{
			name: "Ex5",
			input: `...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........`,
			x:      xy{-2, -2},
			expect: '#',
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			i, _ := parseGarden([]byte(tt.input))
			assert.Equal(t, tt.expect, i.Get(tt.x))
		})
	}
}
